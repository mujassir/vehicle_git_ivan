using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Text;
using VehicleApplication.BLL;
using VehicleApplication.CustomClasses;
using System.Web.Script.Serialization;
using System.Linq.Expressions;
using VehicleApplication.DAL;
using System.Reflection;
using VehicleApplication.BLL.DynamicLinq;
using System.Data.Objects.SqlClient;
using System.Data.Objects;
using System.IO;
using Newtonsoft.Json;

namespace VehicleApplication
{
    public partial class ManageOWRInfo : BasePage
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            string key = Request["key"] + "";
            if (key != "")
            {
                string data = "";
                if (key == "GetDataTable")
                {
                    data = GetDataTable();
                }
                else if (key == "Delete")
                {
                    data = Delete();
                }
                else if (key == "GetByID")
                {
                    data = GetByID();
                }
                else if (key == "Save")
                {
                    data = Save();
                }
                else if (key == "SaveFile")
                {
                    data = SaveFile();
                }
                Response.Clear();
                Response.ClearHeaders();
                Response.ClearContent();
                Response.Write(data);
                Response.Flush();
                Response.End();
            }
        }
        public string Delete()
        {
            int id = Numerics.GetInt(Request["id"]);
            try
            {
                new DailyRecordRepository().Delete(id);
            }
            catch (Exception ex)
            {
            }

            return "";
        }
        public string GetByID()
        {
            string result = "";
            int id = Numerics.GetInt(Request["id"]);
            try
            {
                result = JsonConvert.SerializeObject(new DailyRecordRepository().GetByID(id));
            }
            catch (Exception ex)
            {
            }
            return result;
        }

        public string Save()
        {
            string result = "";
            try
            {
                DailyRecord dr = new JavaScriptSerializer().Deserialize<DailyRecord>(Request["record"]);
                var files = new JavaScriptSerializer().Deserialize<List<DailyRecordFile>>(Request["files"]);
                string sourceDir = Server.MapPath("/TempFiles");
                string destinationDir = Server.MapPath("/Attachments");
                foreach (var item in files)
                {
                    dr.DailyRecordFiles.Add(item);
                    try
                    {
                        File.Copy(sourceDir + "/" + item.URL, destinationDir + "/" + item.URL, true);
                    }
                    catch (Exception)
                    {
                    }
                }
                new DailyRecordRepository().Save(dr);
            }
            catch (Exception ex)
            {
            }

            return result;

        }
        public string SaveFile()
        {
            var id = 0;
            string d = "<tr><td>" + Request["name"] + "<input type='hidden' class='hdurl' value='" + Request["url"] + "' ></td><td><img src='../images/delete.png' title='Delete' onclick=\"FileDelete(this)\" /></td></tr>";
            return GetResult("1", d);

        }

        public string GetResult(string result, string data)
        {
            return new JavaScriptSerializer().Serialize(
                new
                {
                    Result = result,
                    Data = data,
                }
                );
        }


        public string GetDataTable()
        {
            string role = Session["UserRole"] + "";
            role = role.ToLower();
            string[] coloumns = { "", "HistoricArc", "SBC_VIN", "UUID", "TruckID", "InstallType", "SerialNumber", "City", "State", "InstallationDate" };
            int echo = Int32.Parse(Request.Params["sEcho"]);
            int displayLength = Int32.Parse(Request.Params["iDisplayLength"]);
            int colIndex = Int32.Parse(Request.Params["iSortCol_0"]);
            int displayStart = Int32.Parse(Request.Params["iDisplayStart"]);
            string search = (Request.Params["sSearch"] + "").Trim();

            OWRInfoRepository dal = new OWRInfoRepository();
            var records = dal.AsQueryable();

            int totalRecords = records.Count();
            int totalDisplayRecords = totalRecords;
            var filteredList = records;
            if (search != "")
                filteredList = records.Where(p =>
                   p.RequestID.Contains(search)
                   || p.MAKE.Contains(search)
                   || p.MODEL.Contains(search)
                   || p.COMPANY.Contains(search)
                   || p.SBC_VIN.Contains(search)
                   || p.GARAGE_STATE.Contains(search)
                   || p.GARAGE_CITY.Contains(search)
                   );
            var orderedList = filteredList.OrderByDescending(p => p.ID);
            if (colIndex < coloumns.Length && coloumns[colIndex] + "" != "")
            {
                string sortDir = Request.Params["sSortDir_0"];
                string sortExpression = coloumns[colIndex] + sortDir;
                orderedList = sortDir == "asc" ? filteredList.OrderBy(coloumns[colIndex]) : filteredList.OrderByDescending(coloumns[colIndex]);
            }
            StringBuilder sb = new StringBuilder();
            sb.Clear();
            JQueryResponse rs = new JQueryResponse();
            foreach (var item in orderedList.Skip(displayStart).Take(displayLength))
            {
                List<string> data = new List<string>();

                string status = "";
                //if (item.DeInstallRequired) status = "<div class='de-install-required' title='De-Install Required'></div>";
                //if (item.InstallComplete) status += "<div class='install-completed' title='Completed'></div>";
                data.Add(status);
                data.Add(item.RequestID);
                data.Add(item.SBC_VIN);
                data.Add(item.MAKE + " " + item.MODEL);
                data.Add(item.GARAGE_CITY + " " + item.GARAGE_STATE);
                data.Add(item.SUPER_FIRST_NAME + " " + item.SUPER_LAST_NAME);
                data.Add(item.E_MAIL);
                data.Add(item.COMPANY);
                data.Add(item.WorkingDays + "");
                data.Add(item.TotalDuration + "");
                data.Add(item.SUBMISSION_DATE);
                string editIcon = "";
                string deleteIcon = "<img id='delete'  src='images/delete.png'  class='icon' alt='' onclick=\"Delete(" + item.ID + ")\" style='float:right'   title='Delete Record' />";
                string icons = "";
                if (CanEdit)
                    icons = editIcon;
                if (CanDelete)
                    icons = editIcon + deleteIcon;
                data.Add(icons);
                rs.aaData.Add(data);
            }
            rs.sEcho = echo;
            rs.iTotalRecords = totalRecords;
            rs.iTotalDisplayRecords = totalDisplayRecords;
            return new JavaScriptSerializer().Serialize(rs);
        }
    }
}